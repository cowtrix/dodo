@{
	var adminData = Model.{MEMBER};
	Dodo.AdministratorEntry thisAdmin = adminData.Administrators.Single(ad => ad.User.Guid == context.User.Guid);
	var authManager = (ViewData["auth"] as Dodo.AuthorizationService<{FULL_TYPE}, {SCHEMA_TYPE}>);
	var canDelete = authManager.IsAuthorised(context, Model.Slug, Resources.EHTTPRequestType.DELETE).IsSuccess;
	Dodo.Analytics.AnalyticInfo viewData = Dodo.Analytics.Analytics.GetInfo(Model.Guid);
}
<div class="card">
	<h5 class="card-header">Statistics</h5>
	<div class="card-body">
		<div class="col-auto">
			<div class="form-group row">
				<label class="col-sm-2 col-form-label">Total Views</label>
				<div class="col-sm-10">
					<input type="text" readonly class="form-control-plaintext" id="staticEmail" value="@viewData?.TotalViewCount">
				</div>
			</div>
			<div class="form-group row">
				<label class="col-sm-2 col-form-label">Signed-in Views</label>
				<div class="col-sm-10">
					<input type="text" readonly class="form-control-plaintext" id="staticEmail" value="@viewData?.AuthenticatedViewCount">
				</div>
			</div>
			@{
				if (typeof(Dodo.IGroupResource).IsAssignableFrom(Model.__Type))
				{
					// Draw member count
					<div class="form-group row">
						<label class="col-sm-2 col-form-label">Members</label>
						<div class="col-sm-10">
							<input type="text" readonly class="form-control-plaintext" id="staticEmail" value="@Model.MemberCount">
						</div>
					</div>
				}
			}
		</div>
		<div class="col">

		</div>
	</div>
</div>
@{ if (thisAdmin.Permissions.CanAddAdmin)
	{
		<div class="card">
			<h5 class="card-header">Add a New Administrator</h5>
			<div class="card-body">
				<form id="newadmin" method="post" action="@Model.Slug/addadmin">
					<div class="form-group">
						<input id="newAdminIdentifier" name="newAdminIdentifier" class="form-control"></input>
						<small id="helpBlock" class="form-text text-muted">
							This can be the username, user ID, or an email. If the holder of the email doesn't already have an account, they will be sent an invite link.
						</small>
					</div>
					<input type="submit" value="Add" class="btn btn-primary btn-block" />
				</form>
			</div>
		</div>
	} }
<div class="card">
	<h5 class="card-header">Current Administrators</h5>
	<div class="card-body">
		<div id="accordion">
			@{
				var canadd = thisAdmin.Permissions.CanAddAdmin;
				var canremove = thisAdmin.Permissions.CanRemoveAdmin;
				var counter = 0;
				foreach (var admin in adminData.Administrators)
				{
					string getID(string name) { return $"{name}"; };
					var isMe = admin.User.Guid == context.User.Guid;
					var userVal = admin.User.GetValue();
					var isTemp = !userVal.PersonalData.EmailConfirmed;
					var canedit = !isMe && thisAdmin.Permissions.CanChangePermissions;

					<div class="card">
						<div class="card-header" id="heading@(counter)">
							<div class="row">
								<div class="col-auto">
									<button class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapse@(counter)" aria-expanded="false" aria-controls="collapse@(counter)">
										@{ if (isTemp)
											{
												<h5 class="mb-0">@userVal.PersonalData.Email (Pending Invite)</h5>
											}
											else
											{
												<h5 class="mb-0">@@@admin.User.Slug @(isMe ? "(Me)" : "")</h5>
											}
										}

									</button>
								</div>
								<div class="col" style="text-align:right;">
									@{ if (!isMe && canremove)
										{
											<a class="btn btn-outline-danger" href="@Model.Slug/removeadmin?adminID=@admin.User.Guid">
												<p class="fas fa-trash"></p>
											</a>
										}
									}
								</div>
							</div>
						</div>
						<!-- Permissions foldout -->
						<div id="collapse@(counter)" class="collapse" aria-labelledby="heading@counter" data-parent="#accordion">
							<div class="card-body">
								<form id="admin@(admin.User.Slug)" method="post" action="@Model.Slug/updateadmin?id=@admin.User.Guid" enctype="application/x-www-form-urlencoded">
									<div class="card-body">
										@{ if (thisAdmin.Permissions.CanChangePermissions && isMe)
											{
												<div class="alert alert-info" role="alert">
													You can't edit your own permissions.
												</div>
											}
										}
										<div class="row">
											<div class="col">
												<div class="form-check">
													<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanAddAdmin" name="CanAddAdmin" @(admin.Permissions.CanAddAdmin ? "checked" : "")>
													<label class="form-check-label" for="@getID("CanAddAdmin")" style="">Can Add New Admins</label>
												</div>
												<div class="form-check">
													<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanRemoveAdmin" name="CanRemoveAdmin" @(admin.Permissions.CanRemoveAdmin ? "checked" : "")>
													<label class="form-check-label" for="@getID("CanRemoveAdmin")">Can Remove Admins</label>
												</div>
												<div class="form-check">
													<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanChangePermissions" name="CanChangePermissions" @(admin.Permissions.CanChangePermissions ? "checked" : "")>
													<label class="form-check-label" for="@getID("CanChangePermissions")">Can Change Admin Permissions</label>
												</div>
												<div class="form-check">
													<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanEditInfo" name="CanEditInfo" @(admin.Permissions.CanEditInfo ? "checked" : "")>
													<label class="form-check-label" for="@getID("CanEditInfo")">Can Edit Details</label>
												</div>
											</div>
											<div class="col">
												<div class="form-check">
													<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanCreateChildObjects" name="CanCreateChildObjects" @(admin.Permissions.CanCreateChildObjects ? "checked" : "")>
													<label class="form-check-label" for="@getID("CanCreateChildObjects")">Can Create Child Objects</label>
												</div>
												<div class="form-check">
													<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanDeleteChildObjects" name="CanDeleteChildObjects" @(admin.Permissions.CanDeleteChildObjects ? "checked" : "")>
													<label class="form-check-label" for="@getID("CanDeleteChildObjects")">Can Delete Child Objects</label>
												</div>
												<div class="form-check">
													<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanManageAnnouncements" name="CanManageAnnouncements" @(admin.Permissions.CanManageAnnouncements ? "checked" : "")>
													<label class="form-check-label" for="@getID("CanManageAnnouncements")">Can Manage Announcements</label>
												</div>
											</div>
										</div>
									</div>
									@{ if (canedit)
										{
											<div class="card-body">
												<input type="submit" value="Save" class="btn btn-primary btn-block" />
											</div>
										}
									}
								</form>
							</div>
						</div>
					</div>
					counter++;
				}
			}
		</div>
	</div>
</div>
@{ if (canDelete)
	{
		<div class="card">
			<h5 class="card-header">Delete This Object</h5>
			<div class="card-body">
				<div class="alert alert-warning" role="alert">
					<b>WARNING:</b> deleting an object is irreversible. Do not delete unless you are absolutely sure.
				</div>
				<div class="card-body">
					<a href="@Dodo.DodoApp.NetConfig.FullURI/edit/{TYPE}/@Model.Slug/delete" class="btn btn-danger btn-lg btn-block">Delete</a>
				</div>
			</div>
		</div>
	}
}
