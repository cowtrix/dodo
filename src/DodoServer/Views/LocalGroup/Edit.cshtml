@model Dodo.ViewModels.LocalGroupViewModel;

@{
	// This is generated code from the DodoAOT project. DO NOT MODIFY.\r\n
	ViewData["Title"] = "Edit Local Group";
	Dodo.AccessContext context = (Dodo.AccessContext)ViewData["Context"];
	Resources.EPermissionLevel permissionLevel = (Resources.EPermissionLevel)ViewData["Permission"];
	System.TimeZoneInfo Timezone = (System.TimeZoneInfo)ViewData["Timezone"];
}



<ul class="nav nav-tabs" id="myTab" role="tablist">
	<li class="nav-item">
		<a class="nav-link active" id="info-tab" data-toggle="tab" href="#info" role="tab" aria-controls="info" aria-selected="true">Edit Details</a>
	</li>
	@if (typeof(Dodo.Users.Tokens.INotificationResource).IsAssignableFrom(Model.__Type))
	{
		<li class="nav-item">
			<a class="nav-link" id="notifications-tab" data-toggle="tab" href="#notifications" role="tab" aria-controls="notifications" aria-selected="false">Notifications</a>
		</li>
	}
	@if (typeof(Dodo.IAdministratedResource).IsAssignableFrom(Model.__Type))
	{
		<li class="nav-item">
			<a class="nav-link" id="admin-tab" data-toggle="tab" href="#admin" role="tab" aria-controls="admin" aria-selected="false">Adminstration</a>
		</li>
	}
	<li><a class="nav-link active" href="@Dodo.DodoApp.NetConfig.FullURI/LocalGroup/@Model.Slug" target="_blank">View</a></li>
</ul>
<div class="tab-content" id="myTabContent">
	<div class="tab-pane fade show active" id="info" role="tabpanel" aria-labelledby="info-tab">
		<div class="row">
			<div class="card" style="width:100%;">
				<div class="card-body">
					<form asp-action="Edit">
						<div asp-validation-summary="ModelOnly" class="text-danger"></div>
										<div class="form-check">
					<input type="checkbox" asp-for="IsPublished" class="form-check-input"></input>
					<label asp-for="IsPublished" class="form-check-label"></label>
					<span asp-validation-for="IsPublished" class="text-danger"></span>
					<small id="helpBlock" class="form-text text-muted">
						This indicates whether or not this is publicly viewable by all users.
					</small>
				</div>
				<div class="form-group">
					<label asp-for="Name" class="control-label"></label>
					<input  asp-for="Name" class="form-control"></input>
					<span asp-validation-for="Name" class="text-danger"></span>
				</div>
				<div class="form-group">
					<label asp-for="Slug" class="control-label"></label>
					<input  readonly asp-for="Slug" class="form-control"></input>
					<span asp-validation-for="Slug" class="text-danger"></span>
				</div>
				<div class="form-group">
					<label asp-for="Guid" class="control-label"></label>
					<input  readonly asp-for="Guid" class="form-control"></input>
					<span asp-validation-for="Guid" class="text-danger"></span>
				</div>
				<div class="form-group">
					<label asp-for="Revision" class="control-label"></label>
					<input  readonly asp-for="Revision" class="form-control"></input>
					<span asp-validation-for="Revision" class="text-danger"></span>
				</div>
<div class="form-group">
	<label asp-for="PublicDescription" class="form-label"></label>
	<div id="epiceditor"><textarea asp-for="PublicDescription"></textarea></div>
	<script>
		var editor = new EpicEditor({
			basePath: '/lib/epiceditor', clientSideStorage: false,
			autogrow: { minHeight: "200", maxHeight: "400", scroll: true },
			button: { preview: true, fullscreen: false, bar: "show" },
			theme: { base: '/themes/base/epiceditor.css', preview: '/themes/preview/github.css', editor: '/themes/editor/epic-light.css' },
		}).load();
	</script>
</div>


				<div class="form-group">
					<label asp-for="MemberCount" class="control-label"></label>
					<input  readonly asp-for="MemberCount" class="form-control"></input>
					<span asp-validation-for="MemberCount" class="text-danger"></span>
				</div>

<script>
	mapboxgl.accessToken = "@Common.Config.ConfigManager.GetValue("MapBoxGeocodingService_ApiKey", "")"
	var coordinates = document.getElementById('coordinates');
	window.onload = function () {
		var map = new mapboxgl.Map({
			container: 'map',
			style: 'mapbox://styles/mapbox/streets-v11',
			center: [@Model.Location.Longitude, @Model.Location.Latitude],
			zoom: 6
		});
		var geocoder = new MapboxGeocoder({
			accessToken: mapboxgl.accessToken,
			mapboxgl: mapboxgl
		});
		geocoder.on('result', function (result) {
			
			var coords = result["result"]["center"];
			console.warn(JSON.stringify(
				coords,
				null,
				2
			));
			document.getElementById("Model.Location_lat").value = coords[1];
			document.getElementById("Model.Location_lng").value = coords[0];
			// Update the Point feature in `geojson` coordinates
			// and call setData to the source layer `point` on it.
		geojson.features[0].geometry.coordinates = [coords[0], coords[1]];
			map.getSource('point').setData(geojson);
		});
		map.addControl(
			geocoder
		);
		var canvas = map.getCanvasContainer();

		var geojson = {
			'type': 'FeatureCollection',
			'features': [
				{
					'type': 'Feature',
					'geometry': {
						'type': 'Point',
						'coordinates': [@Model.Location.Longitude, @Model.Location.Latitude],
					}
				}
			]
		};

		function onMove(e) {
			var coords = e.lngLat;

			// Set a UI indicator for dragging.
			canvas.style.cursor = 'grabbing';

			// Update the Point feature in `geojson` coordinates
			// and call setData to the source layer `point` on it.
			geojson.features[0].geometry.coordinates = [coords.lng, coords.lat];
			map.getSource('point').setData(geojson);
		}

		function onUp(e) {
			var coords = e.lngLat;

			document.getElementById("Model.Location_lat").value = coords.lat;
			document.getElementById("Model.Location_lng").value = coords.lng;

			canvas.style.cursor = '';

			// Unbind mouse/touch events
			map.off('mousemove', onMove);
			map.off('touchmove', onMove);
		}

		map.on('load', function () {
			// Add a single point to the map
			map.addSource('point', {
				'type': 'geojson',
				'data': geojson
			});

			map.addLayer({
				'id': 'point',
				'type': 'circle',
				'source': 'point',
				'paint': {
					'circle-radius': 10,
					'circle-color': '#3887be'
				}
			});

			// When the cursor enters a feature in the point layer, prepare for dragging.
			map.on('mouseenter', 'point', function () {
				map.setPaintProperty('point', 'circle-color', '#3bb2d0');
				canvas.style.cursor = 'move';
			});

			map.on('mouseleave', 'point', function () {
				map.setPaintProperty('point', 'circle-color', '#3887be');
				canvas.style.cursor = '';
			});

			map.on('mousedown', 'point', function (e) {
				// Prevent the default map drag behavior.
				e.preventDefault();

				canvas.style.cursor = 'grab';

				map.on('mousemove', onMove);
				map.once('mouseup', onUp);
			});

			map.on('touchstart', 'point', function (e) {
				if (e.points.length !== 1) return;

				// Prevent the default map drag behavior.
				e.preventDefault();

				map.on('touchmove', onMove);
				map.once('touchend', onUp);
			});
		});
	}
</script>

@{ /**/
	   var data = Model.Location.LocationData; }
<div class="card">
	<div class="card-body">
		<h5 class="card-title">Location</h5>
		<div id="map" style="height: 20em; width: 100%;"></div>
		<div class="form-group">
			<label asp-for="Location.Latitude" class="control-label"></label>
			<input id="Model.Location_lat" asp-for="Location.Latitude" class="form-control"></input>
			<span asp-validation-for="Location.Latitude" class="text-danger"></span>
		</div>
		<div class="form-group">
			<label asp-for="Location.Longitude" class="control-label"></label>
			<input id="Model.Location_lng" asp-for="Location.Longitude" class="form-control"></input>
			<span asp-validation-for="Location.Longitude" class="text-danger"></span>
		</div>
	</div>
</div>


						<div class="form-group">
							<input type="submit" value="Save" class="btn btn-primary btn-block" />
						</div>
					</form>
				</div>
			</div>
		</div>
		<div class="card">
			<div class="alert alert-warning" role="alert">
				<b>Do not</b> use these settings unless you know what you are doing. Contact your Systems Administrator if you are unsure.
			</div>
			<div class="card-body">
				<a href="@Dodo.DodoApp.NetConfig.FullURI/edit/LocalGroup/@Model.Slug/delete" class="btn btn-danger btn-lg btn-block">Delete</a>
			</div>
		</div>
	</div>
	@if (typeof(Dodo.Users.Tokens.INotificationResource).IsAssignableFrom(Model.__Type))
	{
		<div class="tab-pane fade" id="notifications" role="tabpanel" aria-labelledby="notifications-tab">
			
<div class="row">
	<div class="card" style="width:100%;">		
		<div class="card-body">
			@{foreach (var notification in (ViewData["notifications"] as IEnumerable<Dodo.Notification>))
			{
				<div class="card" style="width:100%;">
					<div class="card-body">
						<p>	@notification.Message </p>
						<p> @TimeZoneInfo.ConvertTimeFromUtc(notification.Timestamp.ToUniversalTime(), Timezone ?? TimeZoneInfo.Utc) </p>
						@if(notification.CanDelete)
						{
							<a href="#" class="btn btn-primary">Delete</a>
						}
					</div>
				</div>
			}}
		</div>
	</div>
</div>

		</div>
	}
	@if (typeof(Dodo.IAdministratedResource).IsAssignableFrom(Model.__Type))
	{
		<div class="tab-pane fade" id="admin" role="tabpanel" aria-labelledby="admin-tab">
			<div id="accordion">
	@{
		var adminData = Model.AdministratorData;
		Dodo.AdministratorEntry thisAdmin = adminData.Administrators.Single(ad => ad.User.Guid == context.User.Guid);


		var canadd = thisAdmin.Permissions.CanAddAdmin;
		var canremove = thisAdmin.Permissions.CanRemoveAdmin;
		var counter = 0;
		foreach (var admin in adminData.Administrators)
		{
			string getID(string name) { return $"{name}"; };
			var isMe = admin.User.Guid == context.User.Guid;
			var canedit = !isMe && thisAdmin.Permissions.CanChangePermissions;

			<div class="card">
				<div class="card-header" id="heading@(counter)">
					<div class="row">
						<div class="col">
							<button class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapse@(counter)" aria-expanded="false" aria-controls="collapse@(counter)">
								<h5 class="mb-0">@@@admin.User.Slug @(isMe ? "(Me)" : "")</h5>
							</button>
						</div>
						<div class="col-sm-auto">
							@{ if (!isMe && canremove)
								{
									<button class="btn btn-outline-danger">
										<p class="fas fa-trash"></p>
									</button>
								}
							}
						</div>
					</div>
				</div>
				<!-- Permissions foldout -->
				<div id="collapse@(counter)" class="collapse" aria-labelledby="heading@counter" data-parent="#accordion">
					<div class="card-body">
						<form id="admin@(admin.User.Slug)" method="post" action="@Model.Slug/updateadmin?id=@admin.User.Slug" enctype="application/x-www-form-urlencoded">
							<div class="card-body">
								@{ if (thisAdmin.Permissions.CanChangePermissions && isMe)
									{
										<div class="alert alert-info" role="alert">
											You can't edit your own permissions.
										</div>
									}
								}
								<div class="row">
									<div class="col">
										<div class="form-check">
											<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanAddAdmin" name="CanAddAdmin" @(admin.Permissions.CanAddAdmin ? "checked" : "")>
											<label class="form-check-label" for="@getID("CanAddAdmin")" style="">Can Add New Admins</label>
										</div>
										<div class="form-check">
											<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanRemoveAdmin" name="CanRemoveAdmin" @(admin.Permissions.CanRemoveAdmin ? "checked" : "")>
											<label class="form-check-label" for="@getID("CanRemoveAdmin")">Can Remove Admins</label>
										</div>
										<div class="form-check">
											<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanChangePermissions" name="CanChangePermissions" @(admin.Permissions.CanChangePermissions ? "checked" : "")>
											<label class="form-check-label" for="@getID("CanChangePermissions")">Can Change Admin Permissions</label>
										</div>
										<div class="form-check">
											<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanEditInfo" name="CanEditInfo" @(admin.Permissions.CanEditInfo ? "checked" : "")>
											<label class="form-check-label" for="@getID("CanEditInfo")">Can Edit Details</label>
										</div>
									</div>
									<div class="col">
										<div class="form-check">
											<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanCreateChildObjects" name="CanCreateChildObjects" @(admin.Permissions.CanCreateChildObjects ? "checked" : "")>
											<label class="form-check-label" for="@getID("CanCreateChildObjects")">Can Create Child Objects</label>
										</div>
										<div class="form-check">
											<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanDeleteChildObjects" name="CanDeleteChildObjects" @(admin.Permissions.CanDeleteChildObjects ? "checked" : "")>
											<label class="form-check-label" for="@getID("CanDeleteChildObjects")">Can Delete Child Objects</label>
										</div>
										<div class="form-check">
											<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanCreateAnnouncements" name="CanCreateAnnouncements" @(admin.Permissions.CanCreateAnnouncements ? "checked" : "")>
											<label class="form-check-label" for="@getID("CanCreateAnnouncements")">Can Create Announcements</label>
										</div>
									</div>
								</div>
							</div>
							@{ if (canedit)
								{
									<div class="card-body">
										<input type="submit" value="Save" class="btn btn-primary btn-block" />
									</div>
								}
							}
						</form>
					</div>
				</div>
			</div>
			counter++;
		}
	}
</div>

		</div>
	}
</div>

