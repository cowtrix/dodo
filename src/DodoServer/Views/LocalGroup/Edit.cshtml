@model Dodo.ViewModels.LocalGroupViewModel;

@{
	// This is generated code from the DodoAOT project. DO NOT MODIFY.\r\n
	ViewData["Title"] = "Edit Local Group";
	Dodo.AccessContext context = (Dodo.AccessContext)ViewData["Context"];
	Resources.EPermissionLevel permissionLevel = (Resources.EPermissionLevel)ViewData["Permission"];
	System.TimeZoneInfo Timezone = (System.TimeZoneInfo)ViewData["Timezone"];
	var notifications = (ViewData["notifications"] as IEnumerable<Dodo.Notification>);
}

<script>
$(function () {
	$('[data-toggle="tooltip"]').tooltip()
})

</script>


	<ul class="nav nav-tabs" id="myTab" role="tablist">
		<li class="nav-item">
			<a class="nav-link active" id="info-tab" data-toggle="tab" href="#info" role="tab" aria-controls="info" aria-selected="true">Edit Details</a>
		</li>
		@if (typeof(Dodo.Users.Tokens.INotificationResource).IsAssignableFrom(Model.__Type))
		{
			<li class="nav-item">
				<a class="nav-link" id="notifications-tab" data-toggle="tab" href="#notifications" role="tab" aria-controls="notifications" aria-selected="false">Notifications</a>
			</li>
		}
		@if (typeof(Dodo.IAdministratedResource).IsAssignableFrom(Model.__Type))
		{
			<li class="nav-item">
				<a class="nav-link" id="admin-tab" data-toggle="tab" href="#admin" role="tab" aria-controls="admin" aria-selected="false">Administration</a>
			</li>
		}
		@if (typeof(Dodo.Roles.Role).IsAssignableFrom(Model.__Type))
		{
			<li class="nav-item">
				<a class="nav-link" id="role-tab" data-toggle="tab" href="#role" role="tab" aria-controls="role" aria-selected="false">Applications</a>
			</li>
		}
		<li><a class="nav-link active" href="@Dodo.DodoApp.NetConfig.FullURI/LocalGroup/@Model.Slug" target="_blank">View <i class="fa fa-link" aria-hidden="true"></i></a></li>
	</ul>
	<div class="tab-content" id="myTabContent">
		<div class="tab-pane fade show active" id="info" role="tabpanel" aria-labelledby="info-tab">
			<div class="card" style="width:100%;">
				<div class="card-body">
					<form asp-action="Edit">
						<div asp-validation-summary="ModelOnly" class="text-danger"></div>
						<div class="form-check">
	<input type="checkbox" asp-for="IsPublished" class="form-check-input"></input>
	<label class="form-check-label">Published</label>
	<span asp-validation-for="IsPublished" class="text-danger"></span>
	<small id="helpBlock" class="form-text text-muted">
		This indicates whether or not this is publicly viewable by all users.
	</small>
	@{
		if (!Model.IsPublished)
		{
		<div class="alert alert-warning" role="alert">
			This is not yet published, so it won't show up in search results or be visible to non-administrators.
		</div>
		}
	}
</div>

				<div class="form-group">
					<label class="control-label">Name</label>
					<input  asp-for="Name" class="form-control"></input>
					<span asp-validation-for="Name" class="text-danger"></span>
				</div>
					<input asp-for="Slug" class="sr-only"></input>
					<input asp-for="Guid" class="sr-only"></input>
					<input asp-for="Revision" class="sr-only"></input>
				<div class="form-group">
				<label class="control-label">Public Description</label>
				<textarea style="height:20em;" asp-for="PublicDescription" class="form-control"></textarea>
					<small id="helpBlock" class="form-text text-muted">
						<script>$('form :input').change(function(){var v = 2048 - $("#PublicDescription").val().length;$('#descriptionLength').text(v + ' characters remaining. ')});</script><p id="descriptionLength"></p>To insert hyperlinks, use the following format: [My link text](www.example.com). This will display as: <a href="www.example.com">My link text</a>
					</small>
				</div>
					<input asp-for="MemberCount" class="sr-only"></input>
					<input asp-for="AdministratorData" class="sr-only"></input>
					<input asp-for="PublicKey" class="sr-only"></input>
<script>
	mapboxgl.accessToken = "@Common.Config.ConfigManager.GetValue("MapBoxGeocodingService_ApiKey", "")"
	var coordinates = document.getElementById('coordinates');
	window.onload = function () {
		var map = new mapboxgl.Map({
			container: 'map',
			style: 'mapbox://styles/mapbox/streets-v11',
			center: [@Model.Location.Longitude, @Model.Location.Latitude],
			zoom: 6
		});
		var geocoder = new MapboxGeocoder({
			accessToken: mapboxgl.accessToken,
			mapboxgl: mapboxgl
		});
		geocoder.on('result', function (result) {
			
			var coords = result["result"]["center"];
			console.warn(JSON.stringify(
				coords,
				null,
				2
			));
			document.getElementById("Model.Location_lat").value = coords[1];
			document.getElementById("Model.Location_lng").value = coords[0];
			// Update the Point feature in `geojson` coordinates
			// and call setData to the source layer `point` on it.
		geojson.features[0].geometry.coordinates = [coords[0], coords[1]];
			map.getSource('point').setData(geojson);
		});
		map.addControl(
			geocoder
		);
		var canvas = map.getCanvasContainer();

		var geojson = {
			'type': 'FeatureCollection',
			'features': [
				{
					'type': 'Feature',
					'geometry': {
						'type': 'Point',
						'coordinates': [@Model.Location.Longitude, @Model.Location.Latitude],
					}
				}
			]
		};

		function onMove(e) {
			var coords = e.lngLat;

			// Set a UI indicator for dragging.
			canvas.style.cursor = 'grabbing';

			// Update the Point feature in `geojson` coordinates
			// and call setData to the source layer `point` on it.
			geojson.features[0].geometry.coordinates = [coords.lng, coords.lat];
			map.getSource('point').setData(geojson);
		}

		function onUp(e) {
			var coords = e.lngLat;

			document.getElementById("Model.Location_lat").value = coords.lat;
			document.getElementById("Model.Location_lng").value = coords.lng;

			canvas.style.cursor = '';

			// Unbind mouse/touch events
			map.off('mousemove', onMove);
			map.off('touchmove', onMove);
		}

		map.on('load', function () {
			// Add a single point to the map
			map.addSource('point', {
				'type': 'geojson',
				'data': geojson
			});

			map.addLayer({
				'id': 'point',
				'type': 'circle',
				'source': 'point',
				'paint': {
					'circle-radius': 10,
					'circle-color': '#3887be'
				}
			});

			// When the cursor enters a feature in the point layer, prepare for dragging.
			map.on('mouseenter', 'point', function () {
				map.setPaintProperty('point', 'circle-color', '#3bb2d0');
				canvas.style.cursor = 'move';
			});

			map.on('mouseleave', 'point', function () {
				map.setPaintProperty('point', 'circle-color', '#3887be');
				canvas.style.cursor = '';
			});

			map.on('mousedown', 'point', function (e) {
				// Prevent the default map drag behavior.
				e.preventDefault();

				canvas.style.cursor = 'grab';

				map.on('mousemove', onMove);
				map.once('mouseup', onUp);
			});

			map.on('touchstart', 'point', function (e) {
				if (e.points.length !== 1) return;

				// Prevent the default map drag behavior.
				e.preventDefault();

				map.on('touchmove', onMove);
				map.once('touchend', onUp);
			});
		});
	}
</script>

@{ var data = Model.Location.LocationData; }
<div class="card">
	<div class="card-body">
		<h5 class="card-title">Location</h5>
		<div id="map" style="height: 20em; width: 100%;"></div>
		<div class="form-group">
			<label asp-for="Location.Latitude" class="control-label"></label>
			<input id="Model.Location_lat" asp-for="Location.Latitude" class="form-control"></input>
			<span asp-validation-for="Location.Latitude" class="text-danger"></span>
		</div>
		<div class="form-group">
			<label asp-for="Location.Longitude" class="control-label"></label>
			<input id="Model.Location_lng" asp-for="Location.Longitude" class="form-control"></input>
			<span asp-validation-for="Location.Longitude" class="text-danger"></span>
		</div>
	</div>
</div>


						<div class="form-group">
							<input type="submit" value="Save" class="btn btn-primary btn-block" />
						</div>
					</form>
				</div>
			</div>
		</div>
		@if (typeof(Dodo.Users.Tokens.INotificationResource).IsAssignableFrom(Model.__Type))
		{
			<div class="tab-pane fade" id="notifications" role="tabpanel" aria-labelledby="notifications-tab">
				<div class="card">
	<h5 class="card-header">Post an Announcement</h5>
	<div class="card-body" style="text-align:right;">
		<form id="newannouncement" method="post" action="notifications/@Model.Slug/new">
			<div class="form-group">
				<textarea id="Message" name="Message" class="form-control" style="height:10em;"></textarea>
			</div>
			<small id="helpBlock" class="form-text text-muted" style="text-align:left;">
				Announcements are messages that will be displayed on the public page and be visible for all users. You can use them to give short updates or messages.<br />
				To insert hyperlinks, use the following format: [My link text](www.example.com). This will display as: <a href="www.example.com">My link text</a>
			</small>
			<input type="submit" value="Post" class="btn btn-primary" style="width:100px;" />
		</form>
	</div>
</div>

<div class="card">
	<h5 class="card-header">Current Notifications</h5>
	<div class="card-body">
		<ul class="list-group">
			@{foreach (var notification in notifications)
				{
					<li class="list-group-item">
						<div class="card-header" style="margin-left:-20px; margin-right:-20px; margin-top:-12px;">
							<div class="row">
								<div class="col" style="margin-left:10px;">
									<div class="row">
										<small>
											@TimeZoneInfo.ConvertTimeFromUtc(notification.Timestamp.ToUniversalTime(), Timezone ?? TimeZoneInfo.Utc).ToString("HH:mm d/M/y")
										</small>
									</div>
									<div class="row">
										<strong>
											@notification.Type.ToUpperInvariant()
										</strong>
									</div>
								</div>
								<div class="col-auto">
									@{ if (!string.IsNullOrEmpty(notification.Source))
										{
											<button type="button" class="btn btn-outline-primary" data-toggle="tooltip" data-placement="bottom" title="Source: @notification.Source">
												<span class="fas fa-comment"></span>
											</button>
										} }
									@{ if (!string.IsNullOrEmpty(notification.Link))
										{
											<button type="button" class="btn btn-outline-primary" data-toggle="tooltip" data-placement="bottom" title="URL: @notification.Link">
												<span class="fas fa-link"></span>
											</button>
										} }
									<button type="button" class="btn btn-outline-primary" data-toggle="tooltip" data-placement="bottom" title="The visibility of this announcement is @Common.NameAttributeExtensions.GetName(notification.PermissionLevel)">
										<span class="fas fa-eye"></span>
									</button>
									@if (notification.CanDelete)
									{
										<a class="btn btn-outline-danger" href="notifications/@Model.Slug/delete?notification=@notification.Guid">
											<p class="fas fa-trash"></p>
										</a>
									}

								</div>
							</div>
						</div>
						<div style="padding:10px;">
							<p style="margin:0;"> @Html.Raw(notification.Message) </p>
						</div>
					</li>
				}}
		</ul>
	</div>
</div>

			</div>
		}
		@if (typeof(Dodo.IAdministratedResource).IsAssignableFrom(Model.__Type))
		{
			<div class="tab-pane fade" id="admin" role="tabpanel" aria-labelledby="admin-tab">
				@{
	var adminData = Model.AdministratorData;
	Dodo.AdministratorEntry thisAdmin = adminData.Administrators.Single(ad => ad.User.Guid == context.User.Guid);
	var authManager = (ViewData["auth"] as Dodo.AuthorizationService<Dodo.LocalGroups.LocalGroup, Dodo.LocalGroups.LocalGroupSchema>);
	var canDelete = authManager.IsAuthorised(context, Model.Slug, Resources.EHTTPRequestType.DELETE).IsSuccess;
	Dodo.Analytics.AnalyticInfo viewData = Dodo.Analytics.Analytics.GetInfo(Model.Guid);
}
<div class="card">
	<h5 class="card-header">Statistics</h5>
	<div class="card-body">
		<div class="col-auto">
			<div class="form-group row">
				<label class="col-sm-2 col-form-label">Total Views</label>
				<div class="col-sm-10">
					<input type="text" readonly class="form-control-plaintext" id="staticEmail" value="@viewData?.TotalViewCount">
				</div>
			</div>
			<div class="form-group row">
				<label class="col-sm-2 col-form-label">Signed-in Views</label>
				<div class="col-sm-10">
					<input type="text" readonly class="form-control-plaintext" id="staticEmail" value="@viewData?.AuthenticatedViewCount">
				</div>
			</div>
			@{
				if (typeof(Dodo.IGroupResource).IsAssignableFrom(Model.__Type))
				{
					// Draw member count
					<div class="form-group row">
						<label class="col-sm-2 col-form-label">Members</label>
						<div class="col-sm-10">
							<input type="text" readonly class="form-control-plaintext" id="staticEmail" value="@Model.MemberCount">
						</div>
					</div>
				}
			}
		</div>
		<div class="col">

		</div>
	</div>
</div>
@{ if (thisAdmin.Permissions.CanAddAdmin)
	{
		<div class="card">
			<h5 class="card-header">Add a New Administrator</h5>
			<div class="card-body">
				<form id="newadmin" method="post" action="@Model.Slug/addadmin">
					<div class="form-group">
						<input id="newAdminIdentifier" name="newAdminIdentifier" class="form-control"></input>
						<small id="helpBlock" class="form-text text-muted">
							This can be the username, user ID, or an email. If the holder of the email doesn't already have an account, they will be sent an invite link.
						</small>
					</div>
					<input type="submit" value="Add" class="btn btn-primary btn-block" />
				</form>
			</div>
		</div>
	} }
<div class="card">
	<h5 class="card-header">Current Administrators</h5>
	<div class="card-body">
		<div id="accordion">
			@{
				var canadd = thisAdmin.Permissions.CanAddAdmin;
				var canremove = thisAdmin.Permissions.CanRemoveAdmin;
				var counter = 0;
				foreach (var admin in adminData.Administrators)
				{
					string getID(string name) { return $"{name}"; };
					var isMe = admin.User.Guid == context.User.Guid;
					var userVal = admin.User.GetValue();
					var isTemp = !userVal.PersonalData.EmailConfirmed;
					var canedit = !isMe && thisAdmin.Permissions.CanChangePermissions;

					<div class="card">
						<div class="card-header" id="heading@(counter)">
							<div class="row">
								<div class="col-auto">
									<button class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapse@(counter)" aria-expanded="false" aria-controls="collapse@(counter)">
										@{ if (isTemp)
											{
												<h5 class="mb-0">@userVal.PersonalData.Email (Pending Invite)</h5>
											}
											else
											{
												<h5 class="mb-0">@@@admin.User.Slug @(isMe ? "(Me)" : "")</h5>
											}
										}

									</button>
								</div>
								<div class="col" style="text-align:right;">
									@{ if (!isMe && canremove)
										{
											<a class="btn btn-outline-danger" href="@Model.Slug/removeadmin?adminID=@admin.User.Guid">
												<p class="fas fa-trash"></p>
											</a>
										}
									}
								</div>
							</div>
						</div>
						<!-- Permissions foldout -->
						<div id="collapse@(counter)" class="collapse" aria-labelledby="heading@counter" data-parent="#accordion">
							<div class="card-body">
								<form id="admin@(admin.User.Slug)" method="post" action="@Model.Slug/updateadmin?id=@admin.User.Guid" enctype="application/x-www-form-urlencoded">
									<div class="card-body">
										@{ if (thisAdmin.Permissions.CanChangePermissions && isMe)
											{
												<div class="alert alert-info" role="alert">
													You can't edit your own permissions.
												</div>
											}
										}
										<div class="row">
											<div class="col">
												<div class="form-check">
													<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanAddAdmin" name="CanAddAdmin" @(admin.Permissions.CanAddAdmin ? "checked" : "")>
													<label class="form-check-label" for="@getID("CanAddAdmin")" style="">Can Add New Admins</label>
												</div>
												<div class="form-check">
													<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanRemoveAdmin" name="CanRemoveAdmin" @(admin.Permissions.CanRemoveAdmin ? "checked" : "")>
													<label class="form-check-label" for="@getID("CanRemoveAdmin")">Can Remove Admins</label>
												</div>
												<div class="form-check">
													<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanChangePermissions" name="CanChangePermissions" @(admin.Permissions.CanChangePermissions ? "checked" : "")>
													<label class="form-check-label" for="@getID("CanChangePermissions")">Can Change Admin Permissions</label>
												</div>
												<div class="form-check">
													<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanEditInfo" name="CanEditInfo" @(admin.Permissions.CanEditInfo ? "checked" : "")>
													<label class="form-check-label" for="@getID("CanEditInfo")">Can Edit Details</label>
												</div>
											</div>
											<div class="col">
												<div class="form-check">
													<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanCreateChildObjects" name="CanCreateChildObjects" @(admin.Permissions.CanCreateChildObjects ? "checked" : "")>
													<label class="form-check-label" for="@getID("CanCreateChildObjects")">Can Create Child Objects</label>
												</div>
												<div class="form-check">
													<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanDeleteChildObjects" name="CanDeleteChildObjects" @(admin.Permissions.CanDeleteChildObjects ? "checked" : "")>
													<label class="form-check-label" for="@getID("CanDeleteChildObjects")">Can Delete Child Objects</label>
												</div>
												<div class="form-check">
													<input value="true" @(!canedit || isMe ? "disabled" : "") type="checkbox" class="form-check-input" id="CanManageAnnouncements" name="CanManageAnnouncements" @(admin.Permissions.CanManageAnnouncements ? "checked" : "")>
													<label class="form-check-label" for="@getID("CanManageAnnouncements")">Can Manage Announcements</label>
												</div>
											</div>
										</div>
									</div>
									@{ if (canedit)
										{
											<div class="card-body">
												<input type="submit" value="Save" class="btn btn-primary btn-block" />
											</div>
										}
									}
								</form>
							</div>
						</div>
					</div>
					counter++;
				}
			}
		</div>
	</div>
</div>
@{ if (canDelete)
	{
		<div class="card">
			<h5 class="card-header">Delete This Object</h5>
			<div class="card-body">
				<div class="alert alert-warning" role="alert">
					<b>WARNING:</b> deleting an object is irreversible. Do not delete unless you are absolutely sure.
				</div>
				<div class="card-body">
					<a href="@Dodo.DodoApp.NetConfig.FullURI/edit/LocalGroup/@Model.Slug/delete" class="btn btn-danger btn-lg btn-block">Delete</a>
				</div>
			</div>
		</div>
	}
}

			</div>
		}
		@if (typeof(Dodo.Roles.Role).IsAssignableFrom(Model.__Type))
		{
			<div class="tab-pane fade" id="role" role="tabpanel" aria-labelledby="role-tab">
				{ROLES}
			</div>
		}
	</div>
